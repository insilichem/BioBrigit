=====
Usage
=====

Input parameters
----------------
The following list contains the possible parameters that can be introduced with
the program, their default values, and a brief explanation.

First, the program has two mandatory arguments:

- **target:** PDB code to be analysed or Path to a local PDB file.
- **metal:** Nature of the metal for which possible binding sites are to be predicted. The complete list of metals currently supported are: Li, Na, K, Rb, Cs, Be, Mg, Ca, Sr, Ba, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Mo, Ru, Rh, Pd, Ag, Cd, Ir, Pt, Au, and Hg. There is an additional mode, General, that uses statistics obtained from all metals in the MetalPDB database.

Optional parameters have to be introduced by '- -', examples are provided in the next section:

- **model:** Which of the trained CNN models do you want to use for the predictions. It accepts two possible values: 'BrigitCNN' which is the default, and 'tinyBrigit' which is a more lightweight version with sligthly worse predictive performance that is recommended for environments were computational efficiency is paramount.
- **device:** Whether the calculations are to be performed in CPU or GPU (default). The program subsequently verifies whether GPU devices are available and if not switches to CPU.
- **device_id:** In cases with multiple GPU devices specify in which the computations should be run. By default is set to device 0.
- **outputfile:** Base name of the output files generated by the program. It is recomended to not include extensions as it will add the extensions by itself. The idea is to generate 2 outputs with names: outputfile_brigit.pdb and outputfile_clusters.txt. The first file will contain information about the probes used to locate possible binding sites and/or metal migration pathways. Should be visualised with a protein/molecule visualizater like UCSF Chimera. To visualize the scores of each probe, select colour by property -> b-factor. The _clusters.txt file contains information regarding the residues closer than `cluster_radius` from the center of the cluster.
- **max_coordinators:** Is a normalization factor that considers the number of residues that are expected to be coordinating the metal center. By default: 2.
- **residues:** Number of residues to be considered when computing possible coordinations. It selects the most likely residues. This parameter affects mostly the performance. By default is set at 10, lower number will compute faster, though, there are some coordinations with specific residues that may not be considered. In the heading of the `_clusters.txt` file, the residues considered for each type of coordination are included.
- **stride:** Step of the CNN sliding window when evaluating the protein. By default: 1. Increase this number will significantly increase the computational speed though it may decrease equally both the accuracy and the sensitivity of the method. It has to be an integer. It is not recomended to change it, except for preliminary analysis where speed is important.
- **pH:** Acidic conditions of the environment. Can be changed when the effect of the protonation of the system is believed to be an important factor in the coordination. By default: 7.4.
- **cluster_radius:** Radius of the clusters. By default: 5 A.
- **cnn_threshold:** Value for the CNN score filter. By default is set to 0.5. It is not recommended to change, unless there is suspicion that there are binding sites that should be detected that are not. However, for this purpose it is recomended first to try different values of `cnn_weight` or `combined_threshold`.
- **combined_threshold:** Value for the final hybrid score to filter results. By default: 0.5. Can be modified depending on how stringent the final predictions are supposed to be. Higher values will only allow for higher scores and conversely.
- **cnn_weight:** Relative importance of the CNN score and the coordination score when computing the final hybrid score. By default: 0.5. Greater values rely more heavily on the predictions by the CNN, and thus, in the second coordination information; whereas, lower values rely more on the coordination analysis and, therefore, on the first coordination sphere.
- **voxelsize:** Resolution when creating the 3D representation in A. Modification might lead to visual artifacts. The accuracy of the CNN is unclear for resolutions different from the default (1 A).
- **residue_score:** Scoring function for the coordination analysis of side chains. By default: Gaussian. Other available options: 'discrete'.
- **verbose:** Information that will be displayed. 0: Only Moleculekit, 1: All.
- **threads:** Number of threads available for multithreading. By default it will create 2 threads per physical core.


Console use
------------

The default use of Brigit is simple

.. code-block:: console

    $ brigit {target} {metal}

For example: 

.. code-block:: console

    $ brigit 1dhy Fe

An output file name can be set: 

.. code-block:: console

    $ brigit 1dhy Fe --outputfile output_name

Furthermore, the maximum number of coordinators to consider 
(`--max_coordinators`) or the threshold score (`--combined_threshold`), can
also be modified:

.. code-block:: console

    $ brigit 1dhy Fe --max_coordinators 4 --combined_threshold 0.75

Finally, the importance of each of the elements of the hybrid scoring
function can be tuned (`--cnn_weight`), as well as the scoring function used for
the coordination analysis (`--residue_score`):

.. code-block:: console

    $ brigit 1dhy Fe --cnn_weight 0.3 --residue_score gaussian

Interpretation of results
-------------------------
The program generates 2 files with names: outputfile_brigit.pdb and outputfile_clusters.txt. The first file will contain information about the probes used to locate possible binding sites and/or metal migration pathways. It should be visualised with a protein/molecule visualizater like UCSF Chimera. To visualize the scores of each probe, select colour by property -> b-factor. The _clusters.txt file contains information regarding the residues closer than `cluster_radius` to the center of the cluster. It covers all possible coordinations that the cluster could experience.

Integration in other projects
-----------------------------

To use Brigit in a project::

    import brigit
    predictor = brigit.Brigit()
    Brigit.run(*args)
